// =====================================================
// DETAILED PERMISSIONS UI MANAGER
// =====================================================

class DetailedPermissionsUI {
    constructor(containerId, prefix = "") {
        this.containerId = containerId;
        this.prefix = prefix;
        this.currentPermissions = {};
        this.currentTemplate = "custom";
    }

    render(permissions = {}) {
        this.currentPermissions = permissions;
        const container = document.getElementById(this.containerId);
        if (!container) return;

        container.innerHTML = `
            <div class="permissions-section">
                <h3>
                    <i data-lucide="shield-check"></i>
                    Quyền Truy Cập Chi Tiết
                </h3>
                <p style="color: var(--text-secondary); font-size: 0.875rem; margin-bottom: var(--spacing-md);">
                    Phân quyền chi tiết cho từng chức năng của từng trang
                </p>

                <div class="role-template">
                    <h4>
                        <i data-lucide="layout-template"></i>
                        Template theo vai trò:
                    </h4>
                    <div class="template-buttons">
                        <button type="button" class="btn btn-secondary template-btn" onclick="${this.prefix}applyTemplate('admin')">
                            <i data-lucide="crown"></i>
                            Admin
                        </button>
                        <button type="button" class="btn btn-secondary template-btn" onclick="${this.prefix}applyTemplate('manager')">
                            <i data-lucide="briefcase"></i>
                            Manager
                        </button>
                        <button type="button" class="btn btn-secondary template-btn" onclick="${this.prefix}applyTemplate('staff')">
                            <i data-lucide="users"></i>
                            Staff
                        </button>
                        <button type="button" class="btn btn-secondary template-btn" onclick="${this.prefix}applyTemplate('viewer')">
                            <i data-lucide="eye"></i>
                            Viewer
                        </button>
                        <button type="button" class="btn btn-secondary template-btn" onclick="${this.prefix}applyTemplate('clear')">
                            <i data-lucide="trash-2"></i>
                            Xóa tất cả
                        </button>
                    </div>
                </div>

                <div class="permissions-summary" id="${this.prefix}permissionsSummary">
                    <span class="permissions-count">0/0 quyền được chọn</span>
                </div>

                <div class="permissions-grid-detailed" id="${this.prefix}permissionsGrid">
                    <!-- Generated by JS -->
                </div>
            </div>
        `;

        this.renderPermissionsGrid();
        this.updateSummary();

        if (typeof lucide !== "undefined") {
            lucide.createIcons();
        }
    }

    renderPermissionsGrid() {
        const container = document.getElementById(
            `${this.prefix}permissionsGrid`,
        );
        if (!container) return;

        container.innerHTML = "";

        Object.values(DETAILED_PERMISSIONS).forEach((page) => {
            const card = document.createElement("div");
            card.className = "permission-card-detailed";
            card.dataset.pageId = page.id;

            const hasPerms =
                this.currentPermissions[page.id] &&
                Object.values(this.currentPermissions[page.id]).some(
                    (v) => v === true,
                );

            if (hasPerms) {
                card.classList.add("has-permissions");
            }

            let subPermsHTML = "";
            Object.entries(page.subPermissions).forEach(([subKey, subPerm]) => {
                const isChecked =
                    this.currentPermissions[page.id]?.[subKey] || false;
                const checkboxId = `${this.prefix}perm_${page.id}_${subKey}`;

                subPermsHTML += `
                    <label class="sub-perm-item ${isChecked ? "checked" : ""}">
                        <input type="checkbox" 
                               id="${checkboxId}"
                               data-page="${page.id}"
                               data-sub="${subKey}"
                               ${isChecked ? "checked" : ""}
                               onchange="${this.prefix}togglePermission('${page.id}', '${subKey}')">
                        <i data-lucide="${subPerm.icon}" class="sub-perm-icon"></i>
                        <span>${subPerm.name}</span>
                    </label>
                `;
            });

            card.innerHTML = `
                <div class="permission-header">
                    <div class="permission-title">
                        <i data-lucide="${page.icon}" class="page-icon"></i>
                        <div>
                            <h4>${page.name}</h4>
                            <p class="permission-desc">${page.description}</p>
                        </div>
                    </div>
                    <button type="button" class="toggle-all-btn" onclick="${this.prefix}toggleAllForPage('${page.id}')">
                        <i data-lucide="check-square"></i>
                    </button>
                </div>
                <div class="sub-permissions">
                    ${subPermsHTML}
                </div>
                <div class="perm-summary">
                    <span class="perm-count">0/${Object.keys(page.subPermissions).length}</span>
                </div>
            `;

            container.appendChild(card);
        });

        this.updateCardCounts();

        if (typeof lucide !== "undefined") {
            lucide.createIcons();
        }
    }

    togglePermission(pageId, subKey) {
        if (!this.currentPermissions[pageId]) {
            this.currentPermissions[pageId] = {};
        }

        this.currentPermissions[pageId][subKey] =
            !this.currentPermissions[pageId][subKey];
        this.currentTemplate = "custom";

        this.updateCardCounts();
        this.updateSummary();
    }

    toggleAllForPage(pageId) {
        const checkboxes = document.querySelectorAll(
            `input[data-page="${pageId}"][id^="${this.prefix}"]`,
        );
        const allChecked = Array.from(checkboxes).every((cb) => cb.checked);

        if (!this.currentPermissions[pageId]) {
            this.currentPermissions[pageId] = {};
        }

        Object.keys(DETAILED_PERMISSIONS[pageId].subPermissions).forEach(
            (subKey) => {
                this.currentPermissions[pageId][subKey] = !allChecked;
            },
        );

        this.currentTemplate = "custom";

        checkboxes.forEach((cb) => {
            cb.checked = !allChecked;
            cb.closest(".sub-perm-item").classList.toggle(
                "checked",
                !allChecked,
            );
        });

        this.updateCardCounts();
        this.updateSummary();
    }

    applyTemplate(templateKey) {
        if (templateKey === "clear") {
            this.currentPermissions = {};
        } else if (PERMISSION_TEMPLATES[templateKey]) {
            this.currentPermissions = JSON.parse(
                JSON.stringify(PERMISSION_TEMPLATES[templateKey].permissions),
            );
        }

        this.currentTemplate = templateKey;
        this.renderPermissionsGrid();
        this.updateSummary();

        if (typeof lucide !== "undefined") {
            lucide.createIcons();
        }
    }

    updateCardCounts() {
        Object.values(DETAILED_PERMISSIONS).forEach((page) => {
            const card = document.querySelector(`[data-page-id="${page.id}"]`);
            if (!card) return;

            const checkboxes = card.querySelectorAll('input[type="checkbox"]');
            const checkedCount = Array.from(checkboxes).filter(
                (cb) => cb.checked,
            ).length;

            if (checkedCount > 0) {
                card.classList.add("has-permissions");
            } else {
                card.classList.remove("has-permissions");
            }

            const countEl = card.querySelector(".perm-count");
            if (countEl) {
                countEl.textContent = `${checkedCount}/${checkboxes.length}`;
            }

            checkboxes.forEach((cb) => {
                const label = cb.closest(".sub-perm-item");
                if (label) {
                    label.classList.toggle("checked", cb.checked);
                }
            });
        });
    }

    updateSummary() {
        let totalSubPerms = 0;
        let grantedSubPerms = 0;

        Object.values(DETAILED_PERMISSIONS).forEach((page) => {
            const pagePerms = this.currentPermissions[page.id] || {};
            const granted = Object.values(pagePerms).filter(
                (v) => v === true,
            ).length;

            totalSubPerms += Object.keys(page.subPermissions).length;
            grantedSubPerms += granted;
        });

        const summaryEl = document.getElementById(
            `${this.prefix}permissionsSummary`,
        );
        if (summaryEl) {
            const countEl = summaryEl.querySelector(".permissions-count");
            if (countEl) {
                countEl.textContent = `${grantedSubPerms}/${totalSubPerms} quyền được chọn`;
            }
        }
    }

    getPermissions() {
        return this.currentPermissions;
    }

    setPermissions(permissions) {
        this.currentPermissions = permissions || {};
        this.renderPermissionsGrid();
        this.updateSummary();
    }
}

// Global instances
let editPermissionsUI = null;
let newPermissionsUI = null;

// Global functions for event handlers
function editTogglePermission(pageId, subKey) {
    if (editPermissionsUI) {
        editPermissionsUI.togglePermission(pageId, subKey);
    }
}

function editToggleAllForPage(pageId) {
    if (editPermissionsUI) {
        editPermissionsUI.toggleAllForPage(pageId);
    }
}

function editApplyTemplate(templateKey) {
    if (editPermissionsUI) {
        editPermissionsUI.applyTemplate(templateKey);
    }
}

function newTogglePermission(pageId, subKey) {
    if (newPermissionsUI) {
        newPermissionsUI.togglePermission(pageId, subKey);
    }
}

function newToggleAllForPage(pageId) {
    if (newPermissionsUI) {
        newPermissionsUI.toggleAllForPage(pageId);
    }
}

function newApplyTemplate(templateKey) {
    if (newPermissionsUI) {
        newPermissionsUI.applyTemplate(templateKey);
    }
}

// Initialize on page load
document.addEventListener("DOMContentLoaded", () => {
    editPermissionsUI = new DetailedPermissionsUI(
        "editDetailedPermissions",
        "edit",
    );
    newPermissionsUI = new DetailedPermissionsUI(
        "newDetailedPermissions",
        "new",
    );

    editPermissionsUI.render({});
    newPermissionsUI.render({});
});
